
Assume that a CPU can process 108 operations per second. Suppose you have to sort an array with 106 elements. Which of the following is true?
Insertion sort will always take more than 2.5 hours while merge sort will always take less than 1 second.
Insertion sort will always take more than 2.5 hours while quicksort will always take less than 1 second
Insertion sort could take more than 2.5 hours while merge sort will always take less than 1 second.-------------------
Insertion sort could take more than 2.5 hours while quicksort will always take less than 1 second.
2 points
Suppose our aim is to sort an array in descending order. Which of the following statements is true?
Input in descending order is worst case for both selection sort and insertion sort.
Input in ascending order is worst case for both selection sort and insertion sort.---------------------
Input in descending order is worst case for insertion sort but not for selection sort.
Input in ascending order is worst case for selection sort but not for insertion sort.
2 points
Suppose we want to sort an array in descending order and we implement quicksort so that we always choose the last element in the array as the pivot element. Assume that the input is a permutation of {1, 2, …, n}. Which of the following would be a worst case permutation of this input for this implementation of quicksort?
{1, 2,…, n} with all even numbers in random order followed by all odd numbers in descending order.
{1, 2, . . . , n} in descending order.
{1,2,...,n} in some random order.
{1, 2, . . . , n} with all odd numbers in ascending order followed by all even numbers in random order.
2 points
Which of the following statements is not true?
For every fixed strategy to choose a pivot for quicksort, we can construct a worst case input that requires time O(n2).
If we randomly choose a pivot element each time, quicksort will always terminate in time O(n log n).
If we could find the median in time O(n), quicksort would have worst case complexity O(n log n).
Quicksort and merge sort are both examples of divide and conquer algorithms.
2 points
We have a list of points [(7,1),(3,5),(6,1),(6,5),(0,2),(9,0)]. We sort these in ascending order by the second coordinate. Which of the folllowing corresponds to a stable sort of this input?
[(9,0),(7,1),(6,1),(0,2),(3,5),(6,5)]
[(0,2),(3,5),(6,1),(6,5),(7,1),(9,0)]
[(9,0),(6,1),(7,1),(0,2),(3,5),(6,5)]--------------
[(9,0),(7,1),(6,1),(0,2),(6,5),(3,5)]
